# encoding: utf-8
class HomeController < ApplicationController
 
  def index
   @pealkirjad = Omadused::TITLES
  end
  
  def soovita  
    inser = (params[:inserted])
    ident = (params[:ident])
    soo= (inser.concat("%"))
    @soovitus = Atc.where("code like ?", soo).first(20) if ident=="atcs"
    @soovitus = Atc.where("nimetus_est like ?", soo).first(20) if ident=="est"
    @soovitus = Atc.where("nimetus_eng like ?", soo).first(20) if ident=="eng"
    render :partial => 'soovita', :content_type => 'text/html'
  end  
  
    

  def kuva
     @atc = (params[:atc]).gsub(/\s/, "")
     rendertext =""
     if pole_olemas?
       rendertext = @atc + ": sellist toimeainet ei ole!"
     else
       #url, millele tuleb lisada atc
       @basicurl = "http://193.40.10.165/register/register.php?otsi=J&keel=est&atc="
       #url, millega kysitakse pdf-e ravimiameti veebilehelt
       @queryurl = @basicurl + @atc
       #veebist ja pdf-ist lugemise requirements:
       veebistlugemise_requirements 
       anna_urli_tabeli_read#siin tekib @finalrows ehk url-ist leitud tabeliread(toimeaine, atc ja spc link)
       if @finalrows.empty?#kui veebi-tulemus on tyhi
         rendertext = "Selle omadusi pole saadaval või on vaja täpsemat ATC koodi."
       else
         #selle toimeaine kohta k2ivad read andmebaasist
         @toimeaine_info = Omadused.where("atc like ?", @atc.concat("%"))
       
         if @toimeaine_info.empty?
           #kui andmebaasis ei ole, siis vota pdf-st ja salvesta ka baasi
           lisa_uus_omadus
         else
           #kui andmebaasis on, siis peab v6rdlema
           vordle_db_tabeli_kuupaevaga
           ################
           #render :text => "MINA olin siin"
         end
       end
         index
         @toimeaine_info = Omadused.where("atc like ?", @atc.concat("%") )
     end
         if rendertext == ""
           render :partial => 'kuva', :content_type => 'text/html'
         else
           render :text => rendertext
         end
  end     
 
    
  def veebistlugemise_requirements
    require 'getTable.rb'
    require 'readPdf.rb'  
  end
  #lisa ravimite omaduste tabelisse uued andmed
  def lisa_uus_omadus    
    @finalrows.each do |rowhash|
      Omadused.create(ReadPdf.new(rowhash).data)#sulgudes tekib pdf-failist hash(, millest tekitatakse uus omadus)
    end 
  end

  #kas selline atc kood eksisteerib?
  def pole_olemas?
    olu = Atc.where("code = ?", @atc).first
    @atc.empty? || olu.nil?
  end 
  
  
   def vordle_db_tabeli_kuupaevaga
      #kui andmebaasi tabelivastus ei ole tühi, on vaja v6rrelda kuupaevi
      #kuupaev andmebaasi tabelist
      #tabelirea id ja kuupaev
      #võrdlemiseks on vaja *toimeaine atc koodi, *toimeaine nimetust, *ravimpreparaadi nimetust, *spc linki
      anna_pdf_info_veebist#siin tekib massiiv @pdf_arr_vordlemiseks, kus on veebist leitud padf-ide hashid(key=pealk, value=sisu)
      #v6rdle @pdf_arr_vordlemiseks ja @toimeaine_info (andmebaasist)
      
      #PLAAN
      #leia vordsed
      #vordle nende kuupaevi
       # kui erinevad, siis update
      #vordle vordseid pdf-arrayga(seal v6ib olla uusi pdf-dokumente)
       # kui leidub uusi, siis lisa baasi
      kuupaeva_vordlemiseks_vordseid = []
      @pdf_arr_vordlemiseks = @pdf_arr_vordlemiseks.to_a
      if (@pdf_arr_vordlemiseks.count > 0)
        @toimeaine_info.each do |item_baasist|
           @item_baasist = item_baasist
           @pdf_arr_vordlemiseks.each do |item_veebist|
             if vrdl? item_veebist
               kuupaeva_vordlemiseks_vordseid.push item_veebist
             end
           end#@pdf_arr items
        end#@toimeaine_arr items
       
        #vordle kuupaevi: kui on erinevad, update
        if(!kuupaeva_vordlemiseks_vordseid.empty?)
          @toimeaine_info.each do |item_baasist|
            @item_baasist = item_baasist
            kuupaeva_vordlemiseks_vordseid.each do |vordle|
              if vrdl?  vordle
                if item_baasist[:TEKSTI_LABIVAATAMISE_KUUPAEV] != vordle[:TEKSTI_LABIVAATAMISE_KUUPAEV]
                  item_baasist.update_attributes(vordle)
                end
              end
            end
          end
        end
           
        #vordle pdf-array-ga: seal võib olla uusi
        @uued = []
        if(kuupaeva_vordlemiseks_vordseid.count != @pdf_arr_vordlemiseks.count)
           @uued = @pdf_arr_vordlemiseks.select{|s| !kuupaeva_vordlemiseks_vordseid.include? s}
        end
        
        if @uued.count > 0
          @uued.each do |uus|
            Omadused.create(uus)
          end
        end
           
      end#if not empty
        #render :text => testresp + kuupaeva_vordlemiseks_vordseid.count.to_s + " uued: " + @uued.count.to_s 
  end
  
  
  
  def anna_urli_tabeli_read
    gl = GetTable.new (@queryurl)
    gl.get_table  
    #iga tabelirea kohta tekib yks pdf dokument;
    # igast pdf dokumendist tekib massiiv, mille elemendid on 
    # hash-id, kus v6ti on pealkiri ja vaartus on pealkirja-alune sisu
    @finalrows=gl.finalrows#read veebilehe tabelist, kus on SPC-lingid, igal real on ATC, toimeaine lad. keeles ja SPC-link PDF-dokumendile
  end
    
 
  
  def vrdl? item_veebist
       (@item_baasist[:atc]==item_veebist[:atc]) && 
       (@item_baasist[:toimeaine]==item_veebist[:toimeaine])  &&
       (@item_baasist[:spc]==item_veebist[:spc])
  end

  
  def anna_pdf_info_veebist
    @pdf_arr_vordlemiseks = [] 
    @finalrows.each do |rowhash|
      @pdf_arr_vordlemiseks.push (ReadPdf.new(rowhash).data) #pedef.hash_array #iga pdf kohta tekib hash(pealkiri => sisu)
    end 
    @pdf_arr_vordlemiseks
  end

  
end
